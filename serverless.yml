# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: rupaklama
# "service" is the name of this project. This will also be added to your AWS resource names.
service: auction-service

provider:
  name: aws
  runtime: nodejs22.x
  region: us-east-1
  stage: ${opt:stage, 'dev'} # Default stage is "dev" if not provided.

  # httpApi:
  #   authorizers:
  #     function: authorizer
  #     cognitoAuthorizer:
  #       type: jwt
  #       identitySource: $request.header.Authorization      

  environment:
    # Environment variables can be used to pass configuration to your Lambda functions.
    # These will be available in the Lambda function code as process.env.<VARIABLE_NAME>.
    AUCTIONS_TABLE: AuctionsTable-${self:provider.stage}

    HOST_REGION: ${self:provider.region}

    AUCTIONS_SNS_TOPIC_ARN:
      # Get the ARN of the SNS topic created in the "resources" section below 
      Ref: AuctionSNSTopic

    AUCTIONS_SQS_QUEUE_URL:
      # Fn::GetAtt function to retrieve the URL of the SQS queue
      Fn::GetAtt:
        - AuctionMailQueue
        - QueueUrl
    


  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:Query

      Resource:
        - arn:aws:dynamodb:${self:provider.region}:${env:AWS_ACCOUNT_ID}:table/AuctionsTable-${self:provider.stage}
        - arn:aws:dynamodb:${self:provider.region}:${env:AWS_ACCOUNT_ID}:table/AuctionsTable-${self:provider.stage}/index/StatusEndingAtIndex

       # This policy allows the Lambda function to publish messages to the SNS topic
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        - Ref: AuctionSNSTopic

      # This policy allows the Lambda function to send messages to and receive messages from the SQS queue
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
      Resource:
        - arn:aws:sqs:${self:provider.region}:${env:AWS_ACCOUNT_ID}:AuctionMailQueue-${self:provider.stage}


resources:
  Resources:
    AuctionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AuctionsTable-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S

            # global secondary indexes (GSI) require attribute definitions for their keys
          - AttributeName: status
            AttributeType: S
          - AttributeName: endingAt
            AttributeType: S

        # Primary key for the table
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST


        # Global Secondary Indexes (GSI) allow querying by status and endingAt
        GlobalSecondaryIndexes:
          - IndexName: StatusEndingAtIndex
            KeySchema:
              # partition key to query by status (OPEN/CLOSED)
              - AttributeName: status
                KeyType: HASH
              # sort key to filter/sort by endingAt
              - AttributeName: endingAt
                KeyType: RANGE

            # ProvisionedThroughput is not needed for PAY_PER_REQUEST billing mode
            # Projection specifies which attributes to return in the query results
            # ALL means all attributes will be returned
            # If you want to return only specific attributes, you can use KEYS_ONLY or INCLUDE
            # KEYS_ONLY returns only the keys of the items
            # INCLUDE allows you to specify additional attributes to return
            Projection:
              ProjectionType: ALL

    AuctionSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: AuctionSNSTopic-${self:provider.stage}

    AuctionSNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        TopicArn:
          Ref: AuctionSNSTopic
        Endpoint: ${env:NOTIFICATION_EMAIL}  

    AuctionMailQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: AuctionMailQueue-${self:provider.stage}
   

functions:
  createAuction:
    handler: handlers/createAuction.handler
    events:
      - httpApi:
          path: /auction
          method: post
          # authorizer: authorizer
          

  
  getAuctions:
    handler: handlers/getAuctions.handler
    events:
      - httpApi:
          path: /auctions
          method: get
          
          

  getAuction:
    handler: handlers/getAuction.handler
    events:
      - httpApi:
          path: /auction/{id}
          method: get
         

  placeBid:
    handler: handlers/placeBid.handler
    events:
      - httpApi:
          path: /auction/{id}/bid
          method: put
          
  processAuctions:
    handler: handlers/processAuctions.handler
    events:
      - schedule: 
          rate: rate(1 minute)
          enabled: false

  # Custom authorizer function for handling authentication and authorization
  # This function will be used to validate JWT tokens and authorize access to protected resources.
  authorizer:
    handler: auth/auth.handler
 
   # Public and private endpoints for testing the custom authorizer
  # These endpoints can be used to test the custom authorizer functionality.
  # The public endpoint does not require authorization, while the private endpoint does.  
  publicEndpoint:
    handler: auth/public.handler
    events:
      - http:
          path: public
          method: POST
          cors: true

  privateEndpoint:
    handler: auth/private.handler
    events:
      - http:
          path: private
          method: POST
          authorizer: authorizer
          cors: true

  sendEmail:
    handler: handlers/sendEmail.handler
    events:
      - sns:
          arn:
            Ref: AuctionSNSTopic
          topicName: AuctionSNSTopic-${self:provider.stage}

      # The sendEmail function is triggered by messages in the SQS queue
      - sqs:
          arn:
            Fn::GetAtt:
              - AuctionMailQueue
              - Arn
          # Batch size defines how many messages to process at once - one email at a time
          # default batchSize is 10
          batchSize: 1

  
 